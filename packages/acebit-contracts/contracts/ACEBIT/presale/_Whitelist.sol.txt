// SPDX-License-Identifier: GPL-3.0

/// @title NeoACEBIT Whitelist

pragma solidity >=0.7.0 <0.9.0;

contract NeoACEBITWhitelist {

    address public owner;
    address deployer;
    int256 totalUsers;

    mapping(address => bool) whitelistedAddresses;

    constructor() {
      owner = msg.sender;
      deployer = msg.sender;
    }

    modifier onlyOwner() {
      require(msg.sender == owner || msg.sender == deployer, "Ownable: caller is not the owner");
      _;
    }

    modifier isWhitelisted(address _address) {
      require(whitelistedAddresses[_address], "Whitelist: You need to be whitelisted");
      _;
    }

    function addUser(address _addressToWhitelist) public onlyOwner {
      whitelistedAddresses[_addressToWhitelist] = true;
      totalUsers += 1;
    }

    function removeUser(address _addressToWhitelist) public onlyOwner {
      whitelistedAddresses[_addressToWhitelist] = false;
      totalUsers -= 1;
    }

    function setOwner(address _newOwner) public onlyOwner {
      owner = _newOwner;
    }

    function verifyUser(address _whitelistedAddress) public view returns(bool) {
      bool userIsWhitelisted = whitelistedAddresses[_whitelistedAddress];
      return userIsWhitelisted;
    }

    function getAlpha() public onlyOwner view returns(int256) {
      return totalUsers;
    }

    function getBeta() public onlyOwner view returns(address) {
      return deployer;
    }

    // function exampleFunction() public view isWhitelisted(msg.sender) returns(bool){
    //   return (true);
    // }
    
    function addMultipleWhitelist(address[] calldata _addresses) external onlyOwner {
        require(_addresses.length <= 999, "too many addresses");
        for (uint256 i = 0; i < _addresses.length; i++) {
            whitelistedAddresses[_addresses[i]] = true;
        }
    }


    function removeMultipleWhitelist(address[] calldata _addresses) external onlyOwner {
        require(_addresses.length <= 999, "too many addresses");
        for (uint256 i = 0; i < _addresses.length; i++) {
            whitelistedAddresses[_addresses[i]] = true;
        }
    }

}